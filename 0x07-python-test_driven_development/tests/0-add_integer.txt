===============================
0-add_integer.py
===============================

Function that adds 2 integers.

=======

``add_integer()`` returns the sum of its arguments.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 3)
    5

Negative values.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(-2, 3)
    1
    
It also works with floating-point values.

::

    >>> add_integer(4.0, 3)
    7
    >>> add_integer(2.2, 3.8)
    5

Works with one argument. Second arg is default as 98

::

    >>> add_integer(102)
    200

TypeError message of None arguments declared

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

TypeError message of None arguments declared

::
    >>> add_integer(1, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

TypeError message of Booleans arguments declared

::

    >>> add_integer(True)
    Traceback (most recent call last):
    TypeError: a must be an integer

TypeError message of Booleans arguments declared

::

    >>> add_integer(1, True)
    Traceback (most recent call last):
    TypeError: b must be an integer

OverflowError float

::

    >>> add_integer(4, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

ValueError float NaN

::

    >>> add_integer(float('NaN'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
